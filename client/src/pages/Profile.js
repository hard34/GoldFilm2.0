import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import api from '../api/api';
import './profile.css';
import MovieCard from '../components/MovieCard';
import MovieSlider from '../components/MovieSlider';

const Profile = () => {
  const { userId } = useParams();
  const navigate = useNavigate();
  const [userData, setUserData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [theme, setTheme] = useState(() => {
    return localStorage.getItem('theme') || 'dark';
  });
  const [isEditing, setIsEditing] = useState(false);
  const [oldPassword, setOldPassword] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [repeatPassword, setRepeatPassword] = useState("");
  const [showOldPassword, setShowOldPassword] = useState(false);
  const [showNewPassword, setShowNewPassword] = useState(false);
  const [showRepeatPassword, setShowRepeatPassword] = useState(false);
  const [watchedMovies, setWatchedMovies] = useState([]);
  const [recentFilms, setRecentFilms] = useState([]);

  useEffect(() => {
    document.documentElement.setAttribute("data-theme", theme);
  }, [theme]);

  useEffect(() => {
    const fetchUserData = async () => {
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          navigate('/');
          return;
        }

        const response = await api.get(`/users/${userId}`, {
          headers: {
            Authorization: `Bearer ${token}`
          }
        });
        setUserData(response.data);

        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ –∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        const visited = Array.from(new Set((response.data.visitedFilms || []).filter(Boolean)));

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
        const filmPromises = visited.map(id =>
          api.get(`/films/${id}`).then(res => res.data.film).catch(() => null)
        );
        const films = (await Promise.all(filmPromises)).filter(Boolean);
        setRecentFilms(films);

        setWatchedMovies([]); // –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –æ—Ç–¥–µ–ª—å–Ω–æ
        setLoading(false);
      } catch (err) {
        console.error('Error fetching user data:', err);
        if (err.response?.status === 401) {
          navigate('/');
        } else {
          setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
        setLoading(false);
      }
    };

    fetchUserData();
  }, [userId, navigate]);

  const toggleTheme = () => {
    const newTheme = theme === "dark" ? "light" : "dark";
    setTheme(newTheme);
    localStorage.setItem('theme', newTheme);
  };

  const handlePasswordChange = async (e) => {
    e.preventDefault();
    
    if (!oldPassword) {
      setError("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å");
      return;
    }

    if (newPassword !== repeatPassword) {
      setError("–ù–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
      return;
    }

    if (newPassword.length < 6) {
      setError("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤");
      return;
    }

    try {
      setLoading(true);
      setError(null);
      const token = localStorage.getItem('token');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å
      const checkResponse = await api.post(
        '/check-password',
        { 
          email: userData.email,
          password: oldPassword 
        },
        {
          headers: {
            Authorization: `Bearer ${token}`
          }
        }
      );

      if (checkResponse.data.errors) {
        setError(checkResponse.data.errors[0]);
        return;
      }

      // –ï—Å–ª–∏ —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π, –º–µ–Ω—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π
      const response = await api.post(
        `/users/${userId}/change-password`,
        { password: newPassword },
        {
          headers: {
            Authorization: `Bearer ${token}`
          }
        }
      );
      
      if (response.data.error) {
        setError(response.data.error);
      } else {
        setIsEditing(false);
        setOldPassword("");
        setNewPassword("");
        setRepeatPassword("");
        setShowOldPassword(false);
        setShowNewPassword(false);
        setShowRepeatPassword(false);
        setError(null);
      }
    } catch (error) {
      console.error("Error changing password:", error);
      setError(error.response?.data?.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å");
    } finally {
      setLoading(false);
    }
  };

  if (loading) return <div className="error-message">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  if (error) return <div className="error-message">{error}</div>;
  if (!userData) return <div className="error-message">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</div>;

  return (
    <div className="profile-page">
      <div className="profile-header">
        <h1>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h1>
        <button onClick={toggleTheme} className="theme-toggle">
          {theme === "dark" ? "‚òÄÔ∏è" : "üåô"}
        </button>
      </div>
      <div className="profile-content">
        <div className="profile-section">
          <h2>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
          <p>Email: {userData?.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
          <p>–†–æ–ª—å: {userData?.isAdmin ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</p>
        </div>

        <div className="profile-section">
          <h2>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h2>
          {isEditing ? (
            <form onSubmit={handlePasswordChange} className="password-form">
              <div className="password-input-container">
                <input
                  type={showOldPassword ? "text" : "password"}
                  placeholder="–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å"
                  value={oldPassword}
                  onChange={(e) => setOldPassword(e.target.value)}
                  required
                />
                <button
                  type="button"
                  className="password-toggle"
                  onClick={() => setShowOldPassword(!showOldPassword)}
                >
                  {showOldPassword ? "üëÅÔ∏è" : "üëÅÔ∏è‚Äçüó®Ô∏è"}
                </button>
              </div>
              <div className="password-input-container">
                <input
                  type={showNewPassword ? "text" : "password"}
                  placeholder="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
                  value={newPassword}
                  onChange={(e) => setNewPassword(e.target.value)}
                  required
                />
                <button
                  type="button"
                  className="password-toggle"
                  onClick={() => setShowNewPassword(!showNewPassword)}
                >
                  {showNewPassword ? "üëÅÔ∏è" : "üëÅÔ∏è‚Äçüó®Ô∏è"}
                </button>
              </div>
              <div className="password-input-container">
                <input
                  type={showRepeatPassword ? "text" : "password"}
                  placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
                  value={repeatPassword}
                  onChange={(e) => setRepeatPassword(e.target.value)}
                  required
                />
                <button
                  type="button"
                  className="password-toggle"
                  onClick={() => setShowRepeatPassword(!showRepeatPassword)}
                >
                  {showRepeatPassword ? "üëÅÔ∏è" : "üëÅÔ∏è‚Äçüó®Ô∏è"}
                </button>
              </div>
              <div className="form-buttons">
                <button type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                <button type="button" onClick={() => {
                  setIsEditing(false);
                  setOldPassword("");
                  setNewPassword("");
                  setRepeatPassword("");
                  setShowOldPassword(false);
                  setShowNewPassword(false);
                  setShowRepeatPassword(false);
                  setError(null);
                }}>
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </form>
          ) : (
            <button onClick={() => setIsEditing(true)} className="change-password-button">
              –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
            </button>
          )}
        </div>

        <div className="profile-section">
          <h2>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã</h2>
          <div className="profile-slider">
            {recentFilms.length > 0 ? (
              <MovieSlider title="" movies={recentFilms} moviesPerPage={3} />
            ) : (
              <p>–í—ã –µ—â—ë –Ω–µ —Å–º–æ—Ç—Ä–µ–ª–∏ —Ñ–∏–ª—å–º—ã</p>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Profile; 